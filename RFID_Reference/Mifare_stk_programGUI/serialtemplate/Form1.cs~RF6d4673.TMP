using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO.Ports;
using System.IO;
using System.Diagnostics;
using System.Configuration;
using System.Threading;


namespace serialtemplate
{
    public partial class Form1 : Form
    {
        public delegate void InvokeDelegate();
       
        
        List<byte> bBuffer = new List<byte>();
       
        public Form1()
        {
            InitializeComponent();
        }
    private void serialPort_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
            recive_box.BeginInvoke(new InvokeDelegate(updateTextbox));
        }

        private void updateTextbox()
        {
          
           
           int ii=0;
           int[] buu = new int[1024];
           int intBytes = serialPort.BytesToRead;
           byte[] bytes = new byte[intBytes];
           string buf;
            serialPort.Read(bytes, 0, intBytes);

           for (ii = 0; ii < intBytes; ii++)
           {
                buf = Convert.ToString(bytes[ii], 16).ToUpper();
                        
                       if (bytes[ii] <= 15)
                        {
                            recive_box.Text += 0;
                        }
                        recive_box.Text += buf;
                        recive_box.Text += " ";
                    
                }

                   recive_box.SelectionStart = recive_box.Text.Length;
               recive_box.ScrollToCaret();
               if (37980 < recive_box.Text.Length)
               { recive_box.Text = ""; }
               
            
        }
        private void check_time()
        { 
        
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            string[] s = SerialPort.GetPortNames();
            int i = 0;

            baud_list.Items.Clear();
            baud_list.Items.Add("1200");
            baud_list.Items.Add("2400");
            baud_list.Items.Add("4800");
            baud_list.Items.Add("9600");
            baud_list.Items.Add("19200");
            baud_list.Items.Add("38400");
            baud_list.Items.Add("57600");
            baud_list.Items.Add("115200");
            baud_list.Items.Add("230400");
            baud_list.SelectedIndex = 3;
            list_port.Items.Clear();
            
            foreach (string port in s)
            {
                list_port.Items.Add(s[i]);
                i++;
            }
            list_port.SelectedIndex = 0;

           
           

        }

        private void con_dis_Click(object sender, EventArgs e)
        {
            
            if (list_port.Items.Count > 0) // If there are ports available
            {
                
                
                
              
                    serialPort.BaudRate = int.Parse(baud_list.Text);
                    serialPort.DataBits = 8;
                    serialPort.Parity = (Parity)Enum.Parse(typeof(Parity), "None");
                    serialPort.StopBits = (StopBits)Enum.Parse(typeof(StopBits), "One");
                    serialPort.PortName = list_port.Text;
                    serialPort.Open();
                    groupBox1.Enabled = true;
               
                
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Byte[] data = new Byte[20];

            data[0] = 0xBA;
            data[1] = 0x02;
            data[2] = 0x01;
            data[3] = 0xB9;

            recive_box.Text = "\r\n";
            serialPort.Write(data, 0, 4);
              
        }
       

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (serialPort.IsOpen)
            {
                serialPort.Close();
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Byte[] data = new Byte[20];

            data[0] = 0xBA;
            data[1] = 0x0A;
            data[2] = 0x02;
            data[3] = 0x00;
            data[4] = 0xAA;
            data[5] = 0xFF;
            data[6] = 0xFF;
            data[7] = 0xFF;
            data[8] = 0xFF;
            data[9] = 0xFF;
            data[10] = 0xFF;
            data[11] = 0x18;
            recive_box.Text = "\r\n";
            serialPort.Write(data,0,12);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Byte[] data = new Byte[20];
            //BA030301BB
            data[0] = 0xBA;
            data[1] = 0x03;
            data[2] = 0x03;
            data[3] = 0x01;
            data[4] = 0xBB;
            recive_box.Text = "\r\n";
            serialPort.Write(data, 0, 5);
            update_sendBox(data);
        }

        private void button4_Click(object sender, EventArgs e)
        {
            if (serialPort.IsOpen)
            {
                serialPort.Close(); // Close port
                groupBox1.Enabled = false;
            }
        }

        void update_sendBox(byte[] send_dat)
        {
            switch (send_dat[3])
            { 
                case 1:
                    send_box.Text  = "Select Card\r\n";
                    send_box.Text += send_dat.ToString();

                break;
            }
        }

        
    }
}
